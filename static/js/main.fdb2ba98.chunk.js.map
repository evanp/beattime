{"version":3,"sources":["BeatClock.js","App.js","reportWebVitals.js","index.js"],"names":["BeatClock","props","state","beats","beatTime","Date","this","intervalId","setInterval","updateBeats","clearInterval","setState","data-testid","toFixed","padStart","date","hours","getUTCHours","mins","getUTCMinutes","secs","getUTCSeconds","Math","abs","React","Component","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6OAmCeA,E,kDAhCb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAACC,MAAOH,EAAUI,SAAS,IAAIC,OAF3B,E,qDAKnB,WAAqB,IAAD,OAClBC,KAAKC,WAAaC,aAAY,kBAAM,EAAKC,gBAAe,O,kCAG1D,WACEC,cAAcJ,KAAKC,c,yBAGrB,WACED,KAAKK,SAAS,CAAER,MAAOH,EAAUI,SAAS,IAAIC,U,oBAahD,WACE,OAAO,uBAAMO,cAAY,YAAlB,cAAgCN,KAAKJ,MAAMC,MAAMU,QAAQ,GAAGC,SAAS,S,uBAX9E,SAAgBC,GACTA,IACHA,EAAO,IAAIV,MAEb,IAAIW,EAAgC,KAAvBD,EAAKE,cAAwB,EAAIF,EAAKE,cAAgB,EAC/DC,EAAOH,EAAKI,gBACZC,EAAOL,EAAKM,gBAChB,OAAOC,KAAKC,KAA8B,IAAd,GAARP,EAAcE,GAAcE,GAAQ,U,GAzBpCI,IAAMC,WCYfC,E,4JATb,WACE,OAAO,qBAAKC,UAAU,MAAf,SACL,wBAAQA,UAAU,aAAlB,SACE,cAAC,EAAD,Y,GAJUH,IAAMC,WCQTG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.fdb2ba98.chunk.js","sourcesContent":["import React from 'react';\n\nclass BeatClock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {beats: BeatClock.beatTime(new Date())};\n  }\n\n  componentDidMount() {\n    this.intervalId = setInterval(() => this.updateBeats(), 432)\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.intervalId)\n  }\n\n  updateBeats() {\n    this.setState({ beats: BeatClock.beatTime(new Date()) })\n  }\n\n  static beatTime(date) {\n    if (!date) {\n      date = new Date();\n    }\n    let hours = (date.getUTCHours() === 23) ? 0 : date.getUTCHours() + 1;\n    let mins = date.getUTCMinutes();\n    let secs = date.getUTCSeconds();\n    return Math.abs(((((hours * 60) + mins) * 60) + secs) / 86.4);\n  }\n\n  render() {\n    return <span data-testid=\"beat-time\">@{this.state.beats.toFixed(2).padStart(6)}</span>\n  }\n}\n\nexport default BeatClock;\n","import './App.css';\nimport React from 'react';\nimport BeatClock from './BeatClock';\n\nclass App extends React.Component {\n  render() {\n    return <div className=\"App\">\n      <header className=\"App-header\">\n        <BeatClock />\n      </header>\n    </div>\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}